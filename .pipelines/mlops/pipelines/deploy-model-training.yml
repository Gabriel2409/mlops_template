# simulates an ETL process to create a new version of the datasets
# (here we just copy files from one place to another)
# Done with kedro-azureml using the compute cluster of the aml workspace.
# In a real scenario, would probably be done without using the wokspace compute cluster

variables:
  # - ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
  #     # 'main' branch: PRD environment
  #     - template: ../../config-infra-prod.yml
  # - ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
  #     # 'develop' or feature branches: DEV environment
  #     - template: ../../config-infra-dev.yml
  - template: ../../config-infra-prod.yml
  - name: kedro_pipeline_name # pipeline to launch to train the model
    value: dummy_classifier
  - name: model_node_name # node where the model is stored as output
    value: log_sklearn_scores

trigger:
  - none

pool:
  vmImage: $(ap_vm_image)

stages:
  - stage: TrainAndRegisterModel
    jobs:
      - job: TrainAndRegisterModel
        steps:
          - checkout: self
          - template: ../../templates/install-aml-cli.yml
          - template: ../../templates/connect-to-workspace.yml
          # todo: add unit test pipeline
          - template: ../../templates/install-and-cache-python-requirements.yml
          - template: ../../templates/launch-kedro-azureml-pipeline.yml
            parameters:
              kedro_pipeline_name: ${{ variables.kedro_pipeline_name }}
              capture_pipeline_name: true
          - template: ../../templates/retrieve-kedro-job-name.yml
            parameters:
              kedro_pipeline_name: $(LaunchKedroPipeline.CapturedAmlPipelineName)
              job_display_name:  ${{ variables.model_node_name }}
          # - script: |
          #     if [ -z "$(LaunchKedroPipeline.CapturedAmlPipelineName)" ]; then
          #       echo "Error: CapturedAmlPipelineName is not defined."
          #       exit 1  # Exit the script with an error code
          #     else
          #       echo "Captured Output from Launch Kedro Pipeline: $(LaunchKedroPipeline.CapturedAmlPipelineName)"
          #     fi
          #   displayName: 'Echo Captured CapturedAmlPipelineName'
